// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// INVARIANT: doMoreMathAgain should never return 0
contract StatefulFuzzCatches {
    uint256 public myValue = 1;
    uint256 public storedValue = 100;

    /*
     * @dev Should never return 0
     */
    function doMoreMathAgain(uint128 myNumber) public returns (uint256) {
        uint256 response = (uint256(myNumber) / 1) + myValue;
        storedValue = response;
        return response;
    }

    function changeValue(uint256 newValue) public {
        myValue = newValue;
    }
}

import {Test} from "forge-std/Test.sol";
import {StatefulFuzzCatches} from "../../src/invariant-break/StatefulFuzzCatches.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";

contract StatefulFuzzCatchesTest is StdInvariant, Test {
    StatefulFuzzCatches public sfc;

    function setUp() public {
        sfc = new StatefulFuzzCatches();
        targetContract(address(sfc));
    }

    // it will never find the b_ug because it is only testing that one function and not the changeValue function that could change myValue to 0 - we need stateful to change the state to find the b_ug
    function test_DoMoreMathAgain_Stateless(uint128 randomNumber) public {
        sfc.doMoreMathAgain(randomNumber);
        assert(sfc.storedValue() != 0);
    }

    function statefulFuzz_catchesInvariant() public view {
        assert(sfc.storedValue() != 0);
    }
}
